(*
 * Modeller: Roberto Metere, Feb-Apr 2017
 * Modeled from:
 *   Jablon, David P. "Strong password-only authenticated key exchange."
 *   ACM SIGCOMM Computer Communication Review 26.5 (1996): 5-26.
 *   -- Variant with challenge/response in the verification part
 * 
 * === Original SPEKE protocol ===
 * The protocol originally computes the common group generator from a
 * pre-shared secret. It uses the group exponentiation to generate
 * the material to generate future session keys. The security of the
 * scheme is based on the hardness of the inverse operation, i.e. the
 * discrete logarithm.
 * The key confirmation round is a challenge/response mechanism based
 * on encryption with the exchanged key.
 *)
set attacker = active.
set ignoreTypes = true.

free c: channel.

type host.
type session.
type key.
type exponent.
type group.

(* Honest parties *)
const A, B, C, D: host.

(* Table of pre-shared passwords *)
table passwords(host, host, group).

(*
 * Diffie-Hellman
 * The group is a cyclic group in the exponents
 *)
const pwAB : group [private].
fun exp(group, exponent): group.
equation forall x: exponent, y: exponent; exp(exp(pwAB , x), y) = exp(exp(pwAB , y), x).

(* The participants may want to use the shared key for simmetric encryption *)
type plaintext.
type ciphertext.
fun enc(key, plaintext): ciphertext.
reduc forall k: key, p: plaintext; dec(k, enc(k, p)) = p.
free message: plaintext [private].
let processUseSessionKey(k: key) = out(c, enc(k, message)).

(*
 * Declare additional (empty) processes.
 * Depending on the property to check, they will be overwritten
 * with non-empty process.
 *)
let processAgreement = 0.
let processDisclosePasswords = 0.

(* Pre-shared passwords *)
let processSetPasswords(g: group) =
  insert passwords(A, B, g);
  insert passwords(B, A, g);
  
  (*
   * In the case A shares the same password with multiple entities.
   * We remark that such a situation is degenerative and a mistake
   * made by the user; so any fallacy entiled by such behaviour
   * is not strictly imputable to the protocol design.
   *
   * WARNING: impersonation property check overwrites this process.
   *)
(*   insert passwords(A, C, g); *)
(*   insert passwords(C, A, g); *)
(*   insert passwords(B, C, g); *)
(*   insert passwords(C, B, g); *)
  
  processDisclosePasswords.

let processPasswords = processSetPasswords(pwAB).


(* Detecting additional attacks/flaws *)
table tableIuks(host, host, session, key).
table tableRuks(host, host, session, key).
event  endIRuks(host, host, session, key, 
                host, host, session, key).

(*
 * Unilateral UKS attacks.
 * Very important to notice: this property does NOT cover the case
 * when the attacker is an honest entity impersonating another honest
 * entity. Sharing the same password with other honest entities
 * will trivially allow one of them to impersonate the other and
 * breaks the unilateral-UKS resilience in the above mentioned case.
 *)
query a: host, b: host, s: session, a': host, k: key;
  event(endIRuks(a, b, s, k, a', b, s, k)) ==> a = a'.

(* Agreement *)
let processAgreement =
  get  tableIuks(a , b , s , k ) in
  get  tableRuks(a', b', s', k') in
  event endIRuks(a , b , s , k , a', b', s', k').
(* Hash function *)
fun H(bitstring): bitstring.
fun KEY(bitstring): key [typeConverter].
fun grp2bs(group): bitstring [typeConverter].
reduc forall h: group; bs2grp(grp2bs(h)) = h.

(* Used in challenge/response verifications only *)
fun ppair(plaintext, plaintext): plaintext.
reduc forall p1: plaintext, p2: plaintext; fst(ppair(p1, p2)) = p1.
reduc forall p1: plaintext, p2: plaintext; snd(ppair(p1, p2)) = p2.

(* KDF reduction *)
fun KDF(host, group, host, group, session, group): key.
equation forall a: host, X: group, b: host, Y: group, s: session, kmaterial: group; KDF(a, X, b, Y, s, kmaterial) = KEY(H(grp2bs(kmaterial))).

(* Initiator I talking to responder R *)
let processInitiator(s: session) =
  (* This input round is only used to establish who's whom *)
  in(c, (I: host, R: host));
  (* A party cannot possibly know how to communicate to "unknown" parties *)
  get passwords(=I, =R, h) in
    new x: exponent;
    let X = exp(h, x) in
      out(c, (I, X)); (* first communication *)
      in(c, (=R, Y': group));
      let k = KEY(H(grp2bs(exp(Y', x)))) in
        new pA: plaintext;
        out(c, (I, enc(k, pA)));
        in(c, (=R, cipherpair: ciphertext));
        if pA = snd(dec(k, cipherpair)) then
insert tableIuks(I, R, s, k);
          let pB = fst(dec(k, cipherpair)) in
            out(c, (I, enc(k, pB)));
            (* Use the key -- out of the protocol *)
            processUseSessionKey(k).

(* Responder R talking to initiator I *)
let processResponder(s: session) =
  (* This input round is only used to establish who's whom *)
  in(c, (I: host, R: host));
  (* A party cannot possibly know how to communicate to "unknown" parties *)
  get passwords(=R, =I, h) in
    new y: exponent;
    let Y = exp(h, y) in
      out(c, (R, Y)); (* first communication *)
      in(c, (=I, X': group));
      let k = KEY(H(grp2bs(exp(X', y)))) in
        in(c, (=I, cA: ciphertext));
        let pA = dec(k, cA) in
          new pB: plaintext;
          out(c, (R, enc(k, ppair(pB, pA))));
          in(c, (=I, cB: ciphertext));
          if pB = dec(k, cB) then
insert tableRuks(I, R, s, k);
            (* Use the key -- out of the protocol *)
            processUseSessionKey(k).


(*
 * This process captures the idea that all pre-shared password can be used in
 * multiple sessions, but only at most one initiator and at most one responder
 * are allowed in the same session.
 * The symmetric nature of the protocol, if respected, will be in the two
 * processes for the initiator and the responder, i.e. contemporary output to
 * the channel.
 *)
let processSPEKE =
  (new sid: session;
    out(c, sid); (* the sID is explicitly not a secret *)
    (
        (processInitiator(sid))
      | (processResponder(sid))
    )
  ).

(*
 * The idea is that at first, we setup some honest entities to
 * share some password, otherwise the would never engage the protocol.
 * Then we run the protocol for unbounded number of concurrent executions.
 * Finally we record events relating to some values that the entities
 * can agree on.
 *)
process
  (
      processPasswords
    | (!processSPEKE)
    | (!processAgreement)
  )
