(*
 * Modeller: Roberto Metere, Feb-Apr 2017
 * Modeled from:
 *   F Hao, SF Shahandashti "The SPEKE Protocol Revisited."
 *   SSR, 2014
 * 
 * === Patched SPEKE protocol without (mandatory) key checks - Hao and Shahandashti variant ===
 * The protocol originally computes the common group generator from a
 * pre-shared secret. It uses the group exponentiation to generate
 * the material to generate future session keys. The security of the
 * scheme is based on the hardness of the inverse operation, i.e. the
 * discrete logarithm.
 *)
set attacker = active.
set ignoreTypes = true.

free c: channel.

type host.
type session.
type key.
type exponent.
type group.

(* Honest parties *)
const A, B, C, D: host.

(* Table of pre-shared passwords *)
table passwords(host, host, group).

(*
 * Diffie-Hellman
 * The group is a cyclic group in the exponents
 *)
const pwAB : group [private].
fun exp(group, exponent): group.
equation forall x: exponent, y: exponent; exp(exp(pwAB , x), y) = exp(exp(pwAB , y), x).

(* The participants may want to use the shared key for simmetric encryption *)
type plaintext.
type ciphertext.
fun enc(key, plaintext): ciphertext.
reduc forall k: key, p: plaintext; dec(k, enc(k, p)) = p.
free message: plaintext [private].
let processUseSessionKey(k: key) = out(c, enc(k, message)).

(*
 * Declare additional (empty) processes.
 * Depending on the property to check, they will be overwritten
 * with non-empty process.
 *)
let processAgreement = 0.
let processDisclosePasswords = 0.

(* Pre-shared passwords *)
let processSetPasswords(g: group) =
  insert passwords(A, B, g);
  insert passwords(B, A, g);
  
  (*
   * In the case A shares the same password with multiple entities.
   * We remark that such a situation is degenerative and a mistake
   * made by the user; so any fallacy entiled by such behaviour
   * is not strictly imputable to the protocol design.
   *
   * WARNING: impersonation property check overwrites this process.
   *)
  insert passwords(A, C, g);
  insert passwords(C, A, g);
  insert passwords(B, C, g);
  insert passwords(C, B, g);
  
  processDisclosePasswords.

let processPasswords = processSetPasswords(pwAB).


(* Additional group exponentiation rules to Diffie-Hellman to detect malleability *)
equation forall x: exponent, y: exponent, z: exponent; exp(exp(exp(pwAB, z), x), y) = exp(exp(exp(pwAB, z), y), x).

(* Malleability *)
table tableImall(host, host, session, group, exponent, key).
table tableRmall(host, host, session, group, exponent, key).
event mallIR    (host, host, session, group, exponent, key,
                 host, host, session, group, exponent, key).

query a: host, b: host, s: session, h: group, x: exponent, y: exponent, k: key;
  event(mallIR(a, b, s, h, x, k, a, b, s, h, y, k)) ==>
    let X = exp(h, x) in
      let Y = exp(h, y) in
        k = KDF(a, X, b, Y, s, exp(Y, x)) || k = KDF(b, Y, a, X, s, exp(Y, x)).

(* Malleability detection attempt *)
let processAgreement =
  get tableImall(a , b , s , h , x, k ) in
  get tableRmall(a', b', s', h', y, k') in
  event mallIR  (a , b , s , h , x, k , a', b', s', h', y, k').

(*
 * Key Derivation Function.
 * KDF is originally expressed as follows:
 *  KDF(MIN(h1, h2), MAX(h1, h2), MIN(X, Y), MAX(X, Y), X^y or Y^x)
 * The predicate LT will help capturing this concept in the protocol.
 *)
fun KDF(host, group, host, group, session, group): key.
fun LT(host, host): bool. (* ideally a "<"; however, one cannot possibly write its sematics *)

(* Initiator I talking to responder R *)
let processInitiator(s: session) =
  (* This input round is only used to establish who's whom *)
  in(c, (I: host, R: host));
  (* A party cannot possibly know how to communicate to "unknown" parties *)
  get passwords(=I, =R, h) in
    new x: exponent;
    let X = exp(h, x) in
      out(c, (I, X)); (* first communication *)
      in(c, (=R, Y': group));
      (* LT captures the idea of I < R *)
      let k = if LT(I, R)
        then KDF(I, X , R, Y', s, exp(Y', x))
        else KDF(R, Y', I, X , s, exp(Y', x))
      in
insert tableImall(I, R, s, h, x, k);
        (* Use the key -- out of the protocol *)
        processUseSessionKey(k).

(* Responder R talking to initiator I *)
let processResponder(s: session) =
  (* This input round is only used to establish who's whom *)
  in(c, (I: host, R: host));
  (* A party cannot possibly know how to communicate to "unknown" parties *)
  get passwords(=R, =I, h) in
    new y: exponent;
    let Y = exp(h, y) in
      out(c, (R, Y)); (* first communication *)
      in(c, (=I, X': group));
      (* LT captures the idea of I < R *)
      let k = if LT(I, R)
        then KDF(I, X', R, Y , s, exp(X', y))
        else KDF(R, Y , I, X', s, exp(X', y))
      in
insert tableRmall(I, R, s, h, y, k);
        (* Use the key -- out of the protocol *)
        processUseSessionKey(k).



(*
 * This process captures the idea that all pre-shared password can be used in
 * multiple sessions, but only at most one initiator and at most one responder
 * are allowed in the same session.
 * The symmetric nature of the protocol, if respected, will be in the two
 * processes for the initiator and the responder, i.e. contemporary output to
 * the channel.
 *)
let processSPEKE =
  (new sid: session;
    out(c, sid); (* the sID is explicitly not a secret *)
    (
        (processInitiator(sid))
      | (processResponder(sid))
    )
  ).

(*
 * The idea is that at first, we setup some honest entities to
 * share some password, otherwise the would never engage the protocol.
 * Then we run the protocol for unbounded number of concurrent executions.
 * Finally we record events relating to some values that the entities
 * can agree on.
 *)
process
  (
      processPasswords
    | (!processSPEKE)
    | (!processAgreement)
  )
